'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.render = exports.parse = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _virtualElement = require('virtual-element');

var _virtualElement2 = _interopRequireDefault(_virtualElement);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var parse = exports.parse = function parse(_ref) {
  var _ref2 = _slicedToArray(_ref, 1),
      elm = _ref2[0];

  if (!elm.classList.contains('tidal-embed')) {
    return null;
  }

  var dataType = elm.getAttribute('data-type');
  var dataId = elm.getAttribute('data-id');
  return { type: 'tidal', dataType: dataType, dataId: dataId };
};

var render = exports.render = function render(_ref3) {
  var dataType = _ref3.dataType,
      dataId = _ref3.dataId;
  return (0, _virtualElement2.default)('div', { 'class': 'tidal-embed', 'data-type': dataType, 'data-id': dataId });
};