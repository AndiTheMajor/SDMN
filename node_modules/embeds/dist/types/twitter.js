'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.render = exports.parse = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _lodash = require('lodash.find');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash.last');

var _lodash4 = _interopRequireDefault(_lodash3);

var _virtualElement = require('virtual-element');

var _virtualElement2 = _interopRequireDefault(_virtualElement);

var _parseText = require('../parse-text');

var _parseText2 = _interopRequireDefault(_parseText);

var _renderText = require('../render-text');

var _renderText2 = _interopRequireDefault(_renderText);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var type = 'twitter';

var getText = function getText(elm) {
  var pElm = elm.getElementsByTagName('p')[0];
  return (0, _parseText2.default)(pElm);
};

var getUser = function getUser(elm) {
  var userElm = (0, _lodash2.default)(elm.childNodes, function (child) {
    return child.nodeName === '#text';
  });
  if (!userElm) {
    return {
      name: null,
      slug: null
    };
  }
  var userString = userElm.data;
  var lastIndex = userString.lastIndexOf('(');
  var userName = userString.slice(2, lastIndex).trim();
  var userSlug = userString.slice(lastIndex + 2, -2);

  return {
    name: userName,
    slug: userSlug
  };
};

var parse = exports.parse = function parse(_ref) {
  var _ref2 = _slicedToArray(_ref, 1),
      elm = _ref2[0];

  if (!elm.classList.contains('twitter-tweet') && !elm.classList.contains('twitter-video')) {
    return null;
  }

  var embedAs = elm.classList.contains('twitter-video') ? 'video' : 'tweet';

  var aElm = (0, _lodash4.default)(elm.getElementsByTagName('a'));
  if (!aElm) {
    return null;
  }

  var url = aElm.getAttribute('href');
  var id = (0, _lodash4.default)(url.split('/').filter(Boolean)).split('?')[0];
  var date = aElm.childNodes.length > 0 ? aElm.childNodes[0].data : '';
  var user = getUser(elm);
  var text = getText(elm);

  if (!/^\d+$/.test(id)) {
    return null;
  }

  return { embedAs: embedAs, user: user, date: date, text: text, id: id, url: url, type: type };
};

var renderVideo = function renderVideo(_ref3) {
  var text = _ref3.text,
      url = _ref3.url,
      date = _ref3.date,
      user = _ref3.user,
      id = _ref3.id;
  return (0, _virtualElement2.default)(
    'blockquote',
    { 'class': 'twitter-video', 'data-lang': 'en' },
    (0, _virtualElement2.default)(
      'p',
      { lang: 'en', dir: 'ltr' },
      (0, _renderText2.default)(text)
    ),
    renderUser(user),
    (0, _virtualElement2.default)(
      'a',
      { href: url },
      date
    )
  );
};

var renderTweet = function renderTweet(_ref4) {
  var text = _ref4.text,
      url = _ref4.url,
      date = _ref4.date,
      user = _ref4.user,
      id = _ref4.id;
  return (0, _virtualElement2.default)(
    'blockquote',
    { 'class': 'twitter-tweet', 'data-lang': 'en' },
    (0, _virtualElement2.default)(
      'p',
      { lang: 'en', dir: 'ltr' },
      (0, _renderText2.default)(text)
    ),
    renderUser(user),
    (0, _virtualElement2.default)(
      'a',
      { href: url },
      date
    )
  );
};

var renderUser = function renderUser(user) {
  return user && user.name && user.slug ? '&mdash; ' + user.name + ' (@' + user.slug + ') ' : '';
};

var renderTypes = {
  video: renderVideo,
  tweet: renderTweet
};

var render = exports.render = function render(opts) {
  return renderTypes[opts.embedAs] ? renderTypes[opts.embedAs](opts) : renderTypes.tweet(opts);
};