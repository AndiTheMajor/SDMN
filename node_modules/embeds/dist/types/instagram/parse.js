'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _lodash = require('lodash.last');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var type = 'instagram';

var getUserElm = function getUserElm(elm) {
  while (elm && elm.childNodes) {
    elm = elm.childNodes[0];

    if (elm && elm.nodeName === '#text') {
      return elm;
    }
  }

  return null;
};

var getUser = function getUser(elm) {
  var userElm = getUserElm(elm);
  if (!userElm) {
    return { name: null, slug: null };
  }
  var userString = userElm.data;
  var lastIndex = userString.lastIndexOf('(');
  var name = userString.slice(2, lastIndex).replace('photo posted by', '').trim();
  var slug = userString.slice(lastIndex + 2, userString.lastIndexOf(')'));

  return { name: name, slug: slug };
};

var getDate = function getDate(elm) {
  var time = elm && elm.getElementsByTagName('time')[0];
  if (!time) {
    return { urc: null, string: null };
  }
  return {
    utc: time.getAttribute('datetime'),
    string: time.childNodes[0].data
  };
};

function testInstagramMediaEmbed(elm) {
  if (!elm.classList.contains('instagram-media')) {
    return null;
  }

  var paragraphs = elm.getElementsByTagName('p');
  if (!paragraphs[0]) {
    return null;
  }

  var postLink = paragraphs[0].getElementsByTagName('a')[0];
  var text = elm.hasAttribute('data-instgrm-captioned') && postLink.childNodes[0] ? postLink.childNodes[0].data : null;
  var url = postLink.getAttribute('href');
  var id = (0, _lodash2.default)(url.split('/').filter(Boolean));
  var user = getUser((0, _lodash2.default)(paragraphs));
  var date = getDate((0, _lodash2.default)(paragraphs));

  return { type: type, text: text, url: url, id: id, user: user, date: date };
}

var regexp = /https?:\/\/(www.)?instagram\.com\/p\/([A-Za-z0-9_-]+)\/embed/;

function testInstagramIframe(elm) {
  if (elm.tagName.toLowerCase() !== 'iframe') {
    return null;
  }

  var url = elm.getAttribute('src') || '';
  var match = url.match(regexp);
  if (!match) {
    return null;
  }

  var id = match[2];

  return { type: type, text: '', url: 'https://instagram.com/p/' + id, id: id };
}

exports.default = function (_ref) {
  var _ref2 = _slicedToArray(_ref, 1),
      elm = _ref2[0];

  return testInstagramMediaEmbed(elm) || testInstagramIframe(elm);
};