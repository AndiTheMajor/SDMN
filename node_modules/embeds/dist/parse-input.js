'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = function (url) {
  if (!url || typeof url !== 'string') {
    return null;
  }

  for (var i = 0; i < allowed.length; ++i) {
    var _allowed$i = _slicedToArray(allowed[i], 2),
        regex = _allowed$i[0],
        fn = _allowed$i[1];

    var match = url.match(regex);
    if (!match) {
      continue;
    }

    return fn(match);
  }

  return null;
};

var allowed = [[/(https?:)?\/\/(www\.)?instagram\.com\/p\/([\w.-]+)/, function (match) {
  var id = match[3];
  return {
    type: 'instagram',
    text: '',
    url: 'https://www.instagram.com/p/' + id,
    id: id
  };
}], [/(https?:)?\/\/(www\.)?giphy\.com\/embed\/([\w.-]+)/, function (match) {
  var id = match[3];
  return {
    type: 'giphy',
    text: '',
    url: 'https://giphy.com/embed/' + id,
    id: id
  };
}], [/(https?:)?\/\/(www\.)?giphy\.com\/gifs\/(?:.*-)?([^ \/]+)/, function (match) {
  var id = match[3];
  return {
    type: 'giphy',
    text: '',
    url: 'https://giphy.com/embed/' + id,
    id: id
  };
}], [/(https?:)?\/\/(www\.)?facebook\.com\/([\w.-]+)\/(videos|posts)\/([0-9]+)/, function (match) {
  var user = match[3];
  var type = match[4];
  var id = match[5];
  var embedAs = type === 'videos' ? 'video' : 'post';
  return {
    type: 'facebook',
    embedAs: embedAs,
    user: user,
    url: 'https://www.facebook.com/' + user + '/' + type + '/' + id,
    id: id
  };
}], [/(https?:)?\/\/(www\.)?facebook\.com\/([\w.-]+)\/(photos)\/([\w.-]+)\/([0-9]+)/, function (match) {
  var user = match[3];
  var albumId = match[5];
  var id = match[6];
  return {
    type: 'facebook',
    embedAs: 'photo',
    user: user,
    url: 'https://www.facebook.com/' + user + '/photos/' + albumId + '/' + id,
    id: id
  };
}], [/(https?:)?\/\/(www\.)?facebook\.com\/(?:photo\.php\?fbid=)?([0-9]*)/, function (match) {
  var id = match[3];
  return {
    type: 'facebook',
    embedAs: 'photo',
    url: 'https://www.facebook.com/photo.php?fbid=' + id,
    id: id
  };
}], [/(https?:)?\/\/(www\.)?twitter\.com\/([\w.-]+)\/status\/([0-9]+)/, function (match) {
  var user = match[3];
  var id = match[4];
  return {
    type: 'twitter',
    user: user,
    url: 'https://twitter.com/' + user + '/status/' + id,
    id: id
  };
}], [/(https?:)?\/\/(www\.)?youtube\.com\/(embed\/|watch\?v=)([\w.-]+)/, function (match) {
  var id = match[4];
  return {
    type: 'youtube',
    youtubeId: id,
    url: 'https://www.youtube.com/embed/' + id
  };
}], [/(https?:)?\/\/(www\.)?youtu\.be\/([\w.-]+)/, function (match) {
  var id = match[3];
  return {
    type: 'youtube',
    youtubeId: id,
    url: 'https://www.youtube.com/embed/' + id
  };
}], [/(https?:)?\/\/embed\.tumblr\.com\/embed\/post\/([\w.-]+)\/([0-9]+)/, function (match) {
  var key = match[2];
  var id = match[3];
  return {
    type: 'tumblr',
    url: 'https://embed.tumblr.com/embed/post/' + key + '/' + id,
    id: id
  };
}], [/(https?:)?\/\/(www\.)?vine\.co\/v\/([\w.-]+)/, function (match) {
  var id = match[3];
  return {
    type: 'vine',
    url: 'https://vine.co/v/' + id + '/embed/simple',
    id: id
  };
}], [/(https?:)?\/\/(www\.)?imgur\.com\/(gallery\/)?([\w.-]+)/, function (match) {
  var id = match[4];
  return {
    type: 'imgur',
    url: 'https://imgur.com/' + id,
    id: id
  };
}], [/(https?:)?\/\/(www\.|w\.)?graphiq\.com\/(wlp|w)\/([\w.-]+)/, function (match) {
  var id = match[4];
  return {
    type: 'graphiq',
    url: 'https://w.graphiq.com/w/' + id,
    id: id
  };
}], [/(https?:)?\/\/(player\.)?vimeo\.com\/(video\/)?([0-9]+)/, function (match) {
  var id = match[4];
  return {
    type: 'vimeo',
    url: 'https://player.vimeo.com/video/' + id,
    id: id
  };
}], [/https:\/\/(embed|www)\.acast\.com\/([\w.-]+)\/([\w.-]+)/, function (match) {
  var channel = match[2];
  var name = match[3];
  return {
    type: 'acast',
    channel: channel,
    name: name,
    url: 'https://embed.acast.com/' + channel + '/' + name,
    width: 540,
    height: 540
  };
}], [/https:\/\/www\.scribd\.com\/(embeds|document)\/([0-9]+)\/.+/, function (match) {
  var id = match[2];
  return {
    type: 'scribd',
    id: id,
    url: 'https://www.scribd.com/embeds/' + id + '/content'
  };
}], [/https:\/\/open.spotify.com\/(.+)/, function (match) {
  var uri = match[1].replace(/\//g, ':');
  return {
    type: 'spotify',
    url: 'https://embed.spotify.com/?uri=spotify:' + uri
  };
}]];